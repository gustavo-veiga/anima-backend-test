// <auto-generated />
using System;
using Anima.Api.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Anima.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200520220015_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Anima.Model.Aluno", b =>
                {
                    b.Property<int>("Ra")
                        .HasColumnType("int");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("nchar(11)")
                        .IsFixedLength(true)
                        .HasMaxLength(11);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(180)")
                        .HasMaxLength(180);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(180)")
                        .HasMaxLength(180);

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(180)")
                        .HasMaxLength(180);

                    b.HasKey("Ra");

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Alunos");
                });

            modelBuilder.Entity("Anima.Model.Grade", b =>
                {
                    b.Property<int>("CodGrade")
                        .HasColumnType("int");

                    b.Property<string>("Curso")
                        .IsRequired()
                        .HasColumnType("nvarchar(180)")
                        .HasMaxLength(180);

                    b.Property<string>("Disciplina")
                        .IsRequired()
                        .HasColumnType("nvarchar(180)")
                        .HasMaxLength(180);

                    b.Property<int?>("DocenteCodFuncionario")
                        .HasColumnType("int");

                    b.Property<string>("Turma")
                        .IsRequired()
                        .HasColumnType("nvarchar(180)")
                        .HasMaxLength(180);

                    b.HasKey("CodGrade");

                    b.HasIndex("DocenteCodFuncionario");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("Anima.Model.Matricula", b =>
                {
                    b.Property<int>("CodGrade")
                        .HasColumnType("int");

                    b.Property<int>("Ra")
                        .HasColumnType("int");

                    b.HasKey("CodGrade", "Ra");

                    b.HasIndex("Ra");

                    b.ToTable("Matriculas");
                });

            modelBuilder.Entity("Anima.Model.Professor", b =>
                {
                    b.Property<int>("CodFuncionario")
                        .HasColumnType("int");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("nchar(11)")
                        .IsFixedLength(true)
                        .HasMaxLength(11);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(180)")
                        .HasMaxLength(180);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(180)")
                        .HasMaxLength(180);

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(180)")
                        .HasMaxLength(180);

                    b.HasKey("CodFuncionario");

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Professores");
                });

            modelBuilder.Entity("Anima.Model.Grade", b =>
                {
                    b.HasOne("Anima.Model.Professor", "Docente")
                        .WithMany()
                        .HasForeignKey("DocenteCodFuncionario");
                });

            modelBuilder.Entity("Anima.Model.Matricula", b =>
                {
                    b.HasOne("Anima.Model.Grade", "Grade")
                        .WithMany("Matriculas")
                        .HasForeignKey("CodGrade")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Anima.Model.Aluno", "Aluno")
                        .WithMany("Matriculas")
                        .HasForeignKey("Ra")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
